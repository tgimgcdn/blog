---
import { Icon } from '@astrojs/starlight/components';
---

<starlight-theme-select>
  <button
    aria-label="切换主题"
    aria-live="polite"
    class="sl-flex button"
    title="切换主题"
    data-variant="ghost"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="sun"
    >
      <circle cx="12" cy="12" r="4"></circle>
      <path d="M12 2v2"></path>
      <path d="M12 20v2"></path>
      <path d="m4.93 4.93 1.41 1.41"></path>
      <path d="m17.66 17.66 1.41 1.41"></path>
      <path d="M2 12h2"></path>
      <path d="M20 12h2"></path>
      <path d="m6.34 17.66-1.41 1.41"></path>
      <path d="m19.07 4.93-1.41 1.41"></path>
    </svg>

    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="moon"
    >
      <path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"></path>
    </svg>

    <span class="sr-only">切换主题</span>
  </button>
</starlight-theme-select>

<style>
  svg {
    flex-shrink: 0;
    width: 1.5rem;
    height: 1.5rem;
    pointer-events: none;
  }

  :global([data-theme='light']) svg.sun {
    display: none;
  }

  :global([data-theme='dark']) svg.moon {
    display: none;
  }

  .button {
    background: none;
    border: none;
    padding: 0.5rem;
    cursor: pointer !important;
    color: var(--sl-color-text-2);
    border-radius: 0.5rem;
    transition: background-color 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    position: relative;
    z-index: 1000;
    pointer-events: auto !important;
    -webkit-tap-highlight-color: transparent;
    touch-action: manipulation;
  }

  .button:hover,
  .button:active {
    background-color: var(--sl-color-gray-2);
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* 移动端样式 */
  @media (max-width: 768px) {
    .button {
      width: 2.25rem;
      height: 2.25rem;
      padding: 0.4rem;
    }

    svg {
      width: 1.25rem;
      height: 1.25rem;
    }
  }
</style>

<script>
  type Theme = 'auto' | 'dark' | 'light'

  /** 存储主题偏好的 localStorage key */
  const storageKey = 'starlight-theme'

  /** 获取当前主题 */
  function getCurrentTheme(): Theme {
    return document.documentElement.getAttribute('data-theme') as Theme || 'light'
  }

  /** 获取系统主题偏好 */
  function getPreferredColorScheme(): Theme {
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
  }

  /** 加载用户主题偏好 */
  function loadTheme(): Theme {
    const saved = localStorage.getItem(storageKey)
    return (saved === 'dark' || saved === 'light') ? saved : getPreferredColorScheme()
  }

  /** 存储主题偏好 */
  function storeTheme(theme: Theme): void {
    localStorage.setItem(storageKey, theme === 'light' || theme === 'dark' ? theme : '')
  }

  /** 更新主题 */
  function updateTheme(theme: Theme): void {
    document.documentElement.setAttribute('data-theme', theme === 'auto' ? getPreferredColorScheme() : theme)
    storeTheme(theme)
  }

  /** 切换主题 */
  function toggleTheme(): void {
    const currentTheme = getCurrentTheme()
    const newTheme = currentTheme === 'dark' ? 'light' : currentTheme === 'light' ? 'dark' : 'auto'
    updateTheme(newTheme)
  }

  // 初始化主题
  updateTheme(loadTheme())

  // 监听系统主题变化
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
    if (loadTheme() === 'auto') {
      updateTheme('auto')
    }
  })

  // 定义自定义元素
  customElements.define(
    'starlight-theme-select',
    class StarlightThemeSelect extends HTMLElement {
      constructor() {
        super()
        updateTheme(loadTheme())
        const button = this.querySelector('button')
        button?.addEventListener('click', () => {
          const theme = getCurrentTheme()
          const newTheme = theme === 'dark' ? 'light' : theme === 'light' ? 'dark' : 'auto'
          updateTheme(newTheme)
          button?.setAttribute('aria-label', `切换到${newTheme === 'dark' ? '深色' : '浅色'}主题`)
        })

        // 添加触摸事件支持
        button?.addEventListener('touchstart', (e) => {
          e.preventDefault()
          const theme = getCurrentTheme()
          const newTheme = theme === 'dark' ? 'light' : theme === 'light' ? 'dark' : 'auto'
          updateTheme(newTheme)
          button?.setAttribute('aria-label', `切换到${newTheme === 'dark' ? '深色' : '浅色'}主题`)
        }, { passive: false })
      }
    }
  )
</script> 
