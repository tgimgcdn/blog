---
import { Card, CardGrid } from '@astrojs/starlight/components';
import DefaultPage from '@astrojs/starlight/components/StarlightPage.astro';
import HomePage from './HomePage.astro';

// 从属性获取当前页面信息
const { data, ...props } = Astro.props;
const isHomePage = Astro.url.pathname === '/' || Astro.url.pathname === '/index.html';

// 检查是否为博客页面（URL中包含/blog/）
const isBlogPage = Astro.url.pathname.includes('/blog/');

// 如果是首页，处理博客文章的逻辑
let displayPosts = [];
let hasMorePosts = false;

if (isHomePage && Astro.locals.starlightBlog) {
  // 获取博客文章数据
  const { posts } = Astro.locals.starlightBlog;

  // 对文章进行排序：首先是精选文章，然后按日期降序
  const sortedPosts = [...posts].sort((a, b) => {
    // 首先按精选状态排序
    if (a.entry.data.featured && !b.entry.data.featured) return -1;
    if (!a.entry.data.featured && b.entry.data.featured) return 1;
    
    // 然后按日期排序（从新到旧）
    return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
  });

  // 只获取前9篇文章
  displayPosts = sortedPosts.slice(0, 9);
  hasMorePosts = sortedPosts.length > 9;
}

// 格式化日期
function formatDate(dateString) {
  return new Date(dateString).toLocaleDateString('zh-CN');
}
---

<!-- 添加全局外链处理脚本，直接嵌入到页面中 -->
<script is:inline>
/**
 * 全局外链重定向脚本
 * 使用最简单直接的方式处理所有外链
 */
(function() {
  // 检查当前页面是否是中转页面
  var currentPath = window.location.pathname;
  var currentUrl = window.location.href;
  var redirectPage = '/link';
  
  if (currentPath === redirectPage || 
      currentPath === redirectPage + '/' || 
      currentUrl.includes(redirectPage + '?')) {
    console.log('[全局重定向] 当前是中转页面，不处理外链');
    return;
  }
  
  // 保存原始的window.open方法
  var originalWindowOpen = window.open;
  
  // 获取当前站点域名
  var currentDomain = window.location.hostname;
  
  // 简单判断是否是外部链接
  function isExternalLink(url) {
    try {
      // 创建URL对象
      var urlObj = new URL(url);
      
      // 如果协议不是http或https，不处理
      if (!urlObj.protocol.startsWith('http')) {
        return false;
      }
      
      // 如果域名相同，不处理
      return urlObj.hostname !== currentDomain;
    } catch (e) {
      // 无效URL，不处理
      return false;
    }
  }
  
  // 处理单个链接
  function processLink(link) {
    if (!link || !link.href) return;
    
    // 如果已经处理过，跳过
    if (link.hasAttribute('data-processed')) return;
    
    // 检查是否是外部链接
    if (isExternalLink(link.href)) {
      console.log('[全局重定向] 处理链接:', link.href);
      // 保存原始链接
      link.setAttribute('data-original-href', link.href);
      // 修改为跳转链接
      link.href = redirectPage + '?url=' + encodeURIComponent(link.href);
      // 标记为已处理
      link.setAttribute('data-processed', 'true');
    }
  }
  
  // 处理所有链接
  function processAllLinks() {
    document.querySelectorAll('a').forEach(processLink);
  }
  
  // 页面加载完成后立即处理所有链接
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', processAllLinks);
  } else {
    processAllLinks();
  }
  
  // 替换window.open方法
  window.open = function(url, target, features) {
    if (isExternalLink(url)) {
      console.log('[全局重定向] 拦截window.open:', url);
      var redirectUrl = redirectPage + '?url=' + encodeURIComponent(url);
      return originalWindowOpen.call(window, redirectUrl, target, features);
    }
    return originalWindowOpen.apply(window, arguments);
  };
  
  // 劫持所有链接点击
  document.addEventListener('click', function(e) {
    var target = e.target;
    
    // 向上查找最近的a标签
    while (target && target.tagName !== 'A') {
      target = target.parentNode;
      if (!target || target === document) return;
    }
    
    var link = target;
    if (!link || !link.href) return;
    
    // 检查是否是外部链接
    if (isExternalLink(link.href)) {
      e.preventDefault();
      e.stopPropagation();
      console.log('[全局重定向] 拦截链接点击:', link.href);
      var redirectUrl = redirectPage + '?url=' + encodeURIComponent(link.href);
      window.location.href = redirectUrl;
      return false;
    }
  }, true);
  
  // 监听DOM变化，处理新添加的链接
  var observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
      if (mutation.type === 'childList') {
        mutation.addedNodes.forEach(function(node) {
          if (node.nodeType === 1) { // 元素节点
            if (node.tagName === 'A') {
              processLink(node);
            }
            node.querySelectorAll('a').forEach(processLink);
          }
        });
      }
    });
  });
  
  // 开始观察整个文档
  observer.observe(document.documentElement, {
    childList: true,
    subtree: true
  });
  
  console.log('[全局重定向] 脚本已加载, 当前域名:', currentDomain);
})();
</script>

<!-- 移除原有的外链处理脚本 -->
<!-- <script src="/scripts/exterlink-capture.js" is:inline></script> -->

{isHomePage ? (
  <HomePage />
) : (
  <DefaultPage {...props} data={data}>
    <slot />
  </DefaultPage>
)}

<!-- 添加调试输出 -->
<script is:inline>
  console.log('[页面调试] 页面类型:', {
    isHomePage: {isHomePage},
    isBlogPage: {isBlogPage},
    path: location.pathname,
    currentDomain: location.hostname,
  });
</script>

<style>
  .home-page {
    margin: 0;
    padding: 0;
    width: 100%;
  }
  
  .hero {
    background-color: var(--sl-color-bg-accent);
    padding: 4rem 0;
    text-align: center;
    margin-bottom: 2rem;
  }
  
  .hero h1 {
    font-size: 3rem;
    margin: 0 0 1rem;
    color: var(--sl-color-white);
  }
  
  .tagline {
    font-size: 1.5rem;
    margin-bottom: 2rem;
    color: var(--sl-color-gray-1);
  }
  
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  .actions {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: center;
  }
  
  .action {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1.25rem;
    border-radius: 999px;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.2s ease;
  }
  
  .primary {
    background-color: var(--sl-color-text-accent);
    color: var(--sl-color-bg);
  }
  
  .primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  .secondary {
    background-color: transparent;
    border: 1px solid var(--sl-color-gray-5);
    color: var(--sl-color-text);
  }
  
  .secondary:hover {
    background-color: var(--sl-color-gray-6);
  }
  
  h2 {
    margin: 3rem 0 2rem;
    text-align: center;
    font-size: 2rem;
  }
  
  .card-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: var(--sl-color-gray-3);
    margin-top: 0.5rem;
  }
  
  .card-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .tag {
    color: var(--sl-color-text-accent);
    font-size: 0.85rem;
  }
  
  .read-more {
    margin-top: 1rem;
  }
  
  .read-more a {
    color: var(--sl-color-text-accent);
    text-decoration: none;
    font-weight: 500;
  }
  
  .read-more a:hover {
    text-decoration: underline;
  }
  
  .see-all {
    text-align: center;
    margin: 2rem 0;
  }
  
  .action-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background-color: var(--sl-color-accent-low);
    color: var(--sl-color-accent);
    padding: 0.5rem 1.25rem;
    border-radius: 999px;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.2s ease;
  }
  
  .action-button:hover {
    background-color: var(--sl-color-accent);
    color: var(--sl-color-white);
    transform: translateY(-2px);
  }
</style> 
