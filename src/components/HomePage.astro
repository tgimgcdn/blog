---
// 从props获取页码，并提供默认值1
const { pageNum = 1 } = Astro.props;
// 确保页码是有效的数字
let currentPage = typeof pageNum === 'number' ? pageNum : parseInt(String(pageNum || '1').trim(), 10) || 1;
// 确保页码至少为1
currentPage = Math.max(1, currentPage);

// 调试输出
console.log(`HomePage组件: 接收到页码=${pageNum}, 处理后页码=${currentPage}`);

// 获取博客文章数据
let posts = [];

// 尝试从starlightBlog获取数据
const starlightBlog = Astro.locals?.starlightBlog;

if (starlightBlog && starlightBlog.posts) {
  // 使用starlightBlog数据
  posts = starlightBlog.posts;
  
  // 修复链接：确保每篇文章都有正确的href
  posts = posts.map(post => {
    // 检查文章的href
    if (!post.href || post.href.includes('undefined')) {
      // 如果href不存在或包含undefined，则根据文章ID生成新的href
      const blogPath = post.entry.id.replace(/^blog\//, '').replace(/\.mdx?$/, '');
      return {
        ...post,
        href: `/blog/${post.entry.slug || blogPath}`
      };
    }
    return post;
  });
  
  // 打印一些文章的示例链接进行调试
  console.log("Sample post links:", posts.slice(0, 3).map(p => ({title: p.title, href: p.href})));
  console.log(`总文章数: ${posts.length}`);
} else {
  console.log("starlightBlog数据不可用");
}

// 对文章进行排序：首先是精选文章，然后按日期降序
const sortedPosts = [...posts].sort((a, b) => {
  // 首先按精选状态排序
  if (a.entry?.data?.featured && !b.entry?.data?.featured) return -1;
  if (!a.entry?.data?.featured && b.entry?.data?.featured) return 1;
  
  // 然后按日期排序（从新到旧）
  const dateA = a.entry?.data?.pubDate || a.entry?.data?.date;
  const dateB = b.entry?.data?.pubDate || b.entry?.data?.date;
  return new Date(dateB || 0).getTime() - new Date(dateA || 0).getTime();
});

// 计算分页
const postsPerPage = 9; // 每页显示9篇文章
const startIndex = (currentPage - 1) * postsPerPage;
const endIndex = startIndex + postsPerPage;
const displayPosts = sortedPosts.slice(startIndex, endIndex);
const totalPages = Math.ceil(sortedPosts.length / postsPerPage);
console.log(`分页信息: 当前页=${currentPage}, 总页数=${totalPages}, 本页文章数=${displayPosts.length}`);
console.log(`分页范围: 起始索引=${startIndex}, 结束索引=${endIndex}, 总文章数=${sortedPosts.length}`);
const hasMorePosts = totalPages > 1;

// 格式化日期
function formatDate(dateString) {
  return dateString ? new Date(dateString).toLocaleDateString('zh-CN') : '';
}

// 默认缩略图
const defaultThumbnail = "/social-card.webp";
---

<main class="grid-container">
  {!displayPosts || displayPosts.length === 0 ? (
    <div class="debug-info">
      <h2>调试信息</h2>
      <p>当前页码: {currentPage}</p>
      <p>总页数: {totalPages}</p>
      <p>总文章数: {sortedPosts.length}</p>
      <p>起始索引: {startIndex}</p>
      <p>结束索引: {endIndex}</p>
      <p>本页应有文章数: {Math.min(postsPerPage, sortedPosts.length - startIndex)}</p>
      <p>starlightBlog可用: {starlightBlog ? '是' : '否'}</p>
      {starlightBlog && <p>starlightBlog文章数: {starlightBlog.posts?.length || 0}</p>}
    </div>
  ) : null}

  <div class="custom-grid">
    {displayPosts.map((post, index) => (
      <div class="grid-item" style="display: flex; height: 100%; margin-top: 0 !important;">
        <div class="grid-item-content" style="display: flex; flex-direction: column; width: 100%; height: 100%;">
          <a href={post.href} class="thumbnail-link" style="display: block; width: 100%;">
            <div class="thumbnail" style="height: 180px; width: 100%; overflow: hidden; flex: 0 0 auto;">
              <img 
                src={post.entry?.data?.thumbnail || defaultThumbnail} 
                alt={post.title || '文章封面'}
                onerror="this.src='/social-card.webp'"
                style="width: 100%; height: 100%; object-fit: cover;"
              />
            </div>
          </a>
          <div class="content" style="padding: 1rem; display: flex; flex-direction: column; flex: 1 1 auto;">
            <a href={post.href} class="title-link">
              <h3 class="title" title={post.title} style="line-height: 1.5; margin-top: 0; margin-bottom: 0.5rem;">
                {post.entry?.data?.featured && <span class="featured-star">⭐</span>}
                {post.title || '无标题文章'}
              </h3>
            </a>
            <p class="excerpt" style="flex: 1 0 auto;">{post.entry?.data?.description || post.entry?.data?.excerpt || ''}</p>
            <div class="meta">
              <span class="category">{post.entry?.data?.category || '未分类'}</span>
              <time class="date">{formatDate(post.entry?.data?.pubDate || post.entry?.data?.date || new Date())}</time>
            </div>
            {post.entry?.data?.tags && (
              <div class="tags">
                {post.entry.data.tags.map(tag => (
                  <a href={`/blog/tags/${tag}`} class="tag">#{tag}</a>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    ))}
  </div>
  
  {totalPages > 1 && (
    <div class="pagination-container">
      <div class="pagination">
        {Array.from({ length: totalPages }).map((_, i) => {
          const pageNum = i + 1;
          // 使用正确的路径格式
          const pageUrl = pageNum === 1 ? '/' : `/page/${pageNum}/`;
          return (
            <a 
              href={pageUrl} 
              class={`page-link ${currentPage === pageNum ? 'active' : ''}`}
              aria-current={currentPage === pageNum ? 'page' : undefined}
              aria-label={`第 ${pageNum} 页`}
            >
              {pageNum}
            </a>
          );
        })}
      </div>
    </div>
  )}
</main>

<style>
  .grid-container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
  }
  
  .custom-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1.5rem;
    margin-top: 2rem;
    align-items: stretch;
    grid-auto-flow: row;
    grid-auto-rows: 1fr;
  }
  
  .grid-item {
    border-radius: 0.5rem;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s, box-shadow 0.2s;
    background-color: var(--sl-color-bg);
    height: 100%;
    display: flex;
  }
  
  .grid-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);
  }
  
  .grid-item-content {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100%;
  }
  
  .thumbnail-link {
    display: block;
    text-decoration: none;
    width: 100%;
  }
  
  .thumbnail {
    height: 180px;
    width: 100%;
    overflow: hidden;
    flex: 0 0 auto;
  }
  
  .thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s;
  }
  
  .grid-item:hover .thumbnail img {
    transform: scale(1.05);
  }
  
  .content {
    padding: 1rem;
    display: flex;
    flex-direction: column;
    flex: 1 1 auto;
  }
  
  .title-link {
    text-decoration: none;
    color: inherit;
    margin-bottom: 0.5rem;
  }
  
  .title {
    font-size: 1.1rem;
    margin: 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    color: var(--sl-color-text);
    line-height: 1.5;
  }
  
  .featured-star {
    color: gold;
    margin-right: 0.25rem;
    vertical-align: middle;
  }
  
  .excerpt {
    font-size: 0.9rem;
    line-height: 1.4;
    margin: 0 0 0.5rem;
    color: var(--sl-color-text-accent);
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    flex: 1;
  }
  
  .meta {
    display: flex;
    justify-content: space-between;
    font-size: 0.8rem;
    margin-bottom: 0.5rem;
    color: var(--sl-color-gray-3);
  }
  
  .category {
    padding: 0.15rem 0.5rem;
    background-color: var(--sl-color-accent-low);
    border-radius: 99px;
    color: var(--sl-color-accent);
  }
  
  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    font-size: 0.75rem;
  }
  
  .tag {
    color: var(--sl-color-text-accent);
    text-decoration: none;
    transition: color 0.2s;
  }
  
  .tag:hover {
    color: var(--sl-color-accent);
    text-decoration: underline;
  }
  
  .pagination-container {
    margin-top: 4rem;
    padding-top: 2rem;
    width: 100%;
  }
  
  .pagination {
    display: flex;
    justify-content: center;
    margin-bottom: 2rem;
    gap: 0.5rem;
  }
  
  .page-link {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    border-radius: 50%;
    background-color: var(--sl-color-bg);
    color: var(--sl-color-text);
    text-decoration: none;
    transition: all 0.2s;
    border: 1px solid var(--sl-color-gray-5);
  }
  
  .page-link:hover {
    background-color: var(--sl-color-accent-low);
    color: var(--sl-color-accent);
  }
  
  .page-link.active {
    background-color: var(--sl-color-accent);
    color: white;
    border-color: var(--sl-color-accent);
  }
  
  /* 响应式设计 */
  @media (max-width: 768px) {
    .custom-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (max-width: 480px) {
    .custom-grid {
      grid-template-columns: 1fr;
    }
  }
  
  .debug-info {
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 0.5rem;
    padding: 1rem;
    margin-bottom: 1rem;
    color: #212529;
  }
  
  .debug-info h2 {
    margin-top: 0;
    font-size: 1.2rem;
    margin-bottom: 0.5rem;
  }
  
  .debug-info p {
    margin: 0.25rem 0;
    font-family: monospace;
  }
</style> 
