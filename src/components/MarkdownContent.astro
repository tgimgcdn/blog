---
// src/components/MarkdownContent.astro
// 这个组件结合了starlight-blog和starlight-image-zoom的功能
import StarlightBlog from 'starlight-blog/overrides/MarkdownContent.astro';
import StarlightImageZoom from 'starlight-image-zoom/components/ImageZoom.astro';
import { getLanguageFromURL } from '../utils/i18n.js';

// 检查当前页面是否启用了评论
const { entry } = Astro.locals.starlightRoute;

// 获取 giscus 值并确保它是布尔类型
let giscusValue = entry?.data?.giscus;

// 处理不同类型的 giscus 值
if (typeof giscusValue === 'string') {
  giscusValue = giscusValue.toLowerCase() === 'true';
} else if (giscusValue === undefined) {
  giscusValue = false;
}

// 确保 giscusValue 是布尔值
const enableComments = Boolean(giscusValue);

// 获取当前请求信息
const currentUrl = Astro.url.pathname;
const currentLanguage = getLanguageFromURL(currentUrl);

// 构建标准化路径用于Giscus
let normalizedPath = currentUrl;
if (currentLanguage === 'en' && normalizedPath.startsWith('/en/')) {
  normalizedPath = normalizedPath.replace(/^\/en/, '');
}
normalizedPath = normalizedPath.replace(/\/$/, '');

// 确定唯一标识符
const discussionId = normalizedPath;

// 根据当前页面语言设置Giscus评论区语言
const giscusLang = currentLanguage === 'en' ? 'en' : 'zh-CN';
---

<StarlightImageZoom />
<StarlightBlog>
  <slot />
  {(() => {
    if (!enableComments) {
      return null;
    }
    
    return (
      <div id="giscus-container" class="giscus-wrapper" data-debug="comments-enabled" data-giscus-value={String(entry?.data?.giscus)}>
        <script 
          is:inline
          src="https://giscus.app/client.js"
          data-repo="canjieorg/canjie"
          data-repo-id="R_kgDOOoe47g"
          data-category="General"
          data-category-id="DIC_kwDOOoe47s4CqGkA"
          data-mapping="specific"
          data-term={discussionId}
          data-strict="0"
          data-reactions-enabled="1"
          data-emit-metadata="0"
          data-input-position="bottom"
          data-theme="preferred_color_scheme"
          data-lang={giscusLang}
          data-loading="lazy"
          crossorigin="anonymous"
          async
        ></script>
      </div>
    );
  })()}
</StarlightBlog>

<script>
  // 等待 Giscus iframe 加载
  function waitForGiscus() {
    return new Promise((resolve) => {
      // 如果已经存在 iframe，直接返回
      const existingFrame = document.querySelector('iframe.giscus-frame');
      if (existingFrame) {
        resolve(existingFrame);
        return;
      }

      // 监听 Giscus 的加载事件
      const giscusListener = (event) => {
        if (event.origin !== 'https://giscus.app') return;
        if (!(typeof event.data === 'object' && event.data.giscus)) return;

        // 处理各种 Giscus 状态
        if (event.data.giscus.loadingState === 'ready') {
          window.removeEventListener('message', giscusListener);
          const frame = document.querySelector('iframe.giscus-frame');
          if (frame) {
            resolve(frame);
          }
        } else if (event.data.giscus.loadingState === 'error') {
          window.removeEventListener('message', giscusListener);
          resolve(null);
        }
      };

      // 添加事件监听器
      window.addEventListener('message', giscusListener);

      // 设置超时检查
      let attempts = 0;
      const maxAttempts = 10;
      const checkInterval = setInterval(() => {
        const frame = document.querySelector('iframe.giscus-frame');
        if (frame) {
          clearInterval(checkInterval);
          resolve(frame);
        } else if (++attempts >= maxAttempts) {
          clearInterval(checkInterval);
          resolve(null);
        }
      }, 1000);
    });
  }

  // 设置主题观察器
  function setupThemeObserver(giscusFrame) {
    if (!giscusFrame) return;

    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === 'data-theme') {
          const theme = document.documentElement.getAttribute('data-theme');
          try {
            giscusFrame.contentWindow.postMessage({
              giscus: {
                setConfig: {
                  theme: theme === 'dark' ? 'dark_dimmed' : 'light'
                }
              }
            }, 'https://giscus.app');
          } catch (error) {
            console.error('Failed to send theme message:', error);
          }
        }
      });
    });

    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['data-theme']
    });
  }

  // 主函数
  async function init() {
    try {
      const giscusContainer = document.getElementById('giscus-container');
      if (!giscusContainer) return;

      const observer = new IntersectionObserver(async (entries) => {
        const entry = entries[0];
        if (entry.isIntersecting) {
          observer.disconnect();

          const frame = await waitForGiscus();
          if (frame) {
            setupThemeObserver(frame);
          }
        }
      }, {
        rootMargin: '100px'
      });

      observer.observe(giscusContainer);
    } catch (error) {
      console.error('Error initializing Giscus:', error);
    }
  }

  // 确保在 DOM 完全加载后再执行
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      setTimeout(init, 100);
    });
  } else {
    setTimeout(init, 100);
  }
</script>

<style>
  .giscus-wrapper {
    margin-top: 2rem;
    padding-top: 1rem;
    border-top: 1px solid var(--sl-color-gray-5);
    min-height: 200px;
  }

  .giscus-frame {
    min-height: 200px;
  }

  .giscus-frame:not([src])::after {
    content: '评论区加载中...';
    display: block;
    text-align: center;
    padding: 2rem;
    color: var(--sl-color-text-accent);
  }
</style> 
