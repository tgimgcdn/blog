---
// src/components/MarkdownContent.astro
// 这个组件结合了starlight-blog和starlight-image-zoom的功能
import StarlightBlog from 'starlight-blog/overrides/MarkdownContent.astro';
import StarlightImageZoom from 'starlight-image-zoom/components/ImageZoom.astro';
import Comments from 'starlight-giscus/components/Comments.astro';
import { Icon } from '@astrojs/starlight/components';

// 检查当前页面是否启用了评论
const { entry } = Astro.props;
const enableComments = entry?.data?.giscus !== false;
---

<StarlightImageZoom />
<StarlightBlog>
  <slot />
  {enableComments && <div id="giscus-container"><Comments /></div>}
</StarlightBlog>

<button id="theme-toggle" aria-label="切换主题">
  <Icon name="sun" class="sun" />
  <Icon name="moon" class="moon" />
</button>

<script>
  // 主题切换相关函数
  function getCurrentTheme() {
    return document.documentElement.getAttribute('data-theme') || 'light';
  }

  function setTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('starlight-theme', theme);
    
    // 强制更新图标状态
    const sun = document.querySelector('#theme-toggle .sun');
    const moon = document.querySelector('#theme-toggle .moon');
    if (sun && moon) {
      if (theme === 'dark') {
        sun.style.display = 'none';
        moon.style.display = 'block';
      } else {
        sun.style.display = 'block';
        moon.style.display = 'none';
      }
    }
  }

  function toggleTheme() {
    const currentTheme = getCurrentTheme();
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    setTheme(newTheme);
  }

  function initTheme() {
    const savedTheme = localStorage.getItem('starlight-theme');
    if (savedTheme) {
      setTheme(savedTheme);
    } else {
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      setTheme(prefersDark ? 'dark' : 'light');
    }
  }

  // 等待 Giscus iframe 加载
  function waitForGiscus() {
    return new Promise((resolve) => {
      // 如果已经存在 iframe，直接返回
      const existingFrame = document.querySelector('iframe.giscus-frame');
      if (existingFrame) {
        console.log('[Giscus] iframe 已存在');
        resolve(existingFrame);
        return;
      }

      // 监听 Giscus 的加载事件
      const giscusListener = (event) => {
        if (event.origin !== 'https://giscus.app') return;
        if (!(typeof event.data === 'object' && event.data.giscus)) return;

        // 处理各种 Giscus 状态
        if (event.data.giscus.loadingState === 'ready') {
          console.log('[Giscus] 加载完成');
          window.removeEventListener('message', giscusListener);
          const frame = document.querySelector('iframe.giscus-frame');
          if (frame) {
            resolve(frame);
          }
        } else if (event.data.giscus.loadingState === 'error') {
          console.log('[Giscus] 加载出错，可能是新文章还没有评论');
          window.removeEventListener('message', giscusListener);
          resolve(null);
        }
      };

      // 添加事件监听器
      window.addEventListener('message', giscusListener);

      // 设置超时检查
      let attempts = 0;
      const maxAttempts = 10;
      const checkInterval = setInterval(() => {
        const frame = document.querySelector('iframe.giscus-frame');
        if (frame) {
          console.log('[Giscus] iframe 已加载');
          clearInterval(checkInterval);
          resolve(frame);
        } else if (++attempts >= maxAttempts) {
          console.log('[Giscus] 加载超时');
          clearInterval(checkInterval);
          resolve(null);
        }
      }, 1000);
    });
  }

  // 设置主题观察器
  function setupThemeObserver(giscusFrame) {
    if (!giscusFrame) {
      console.log('[主题切换] Giscus iframe 未找到，无法设置主题观察器');
      return;
    }

    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === 'data-theme') {
          const theme = document.documentElement.getAttribute('data-theme');
          console.log('[主题切换] 检测到主题变化:', theme);
          
          try {
            giscusFrame.contentWindow.postMessage({
              giscus: {
                setConfig: {
                  theme: theme === 'dark' ? 'dark_dimmed' : 'light'
                }
              }
            }, 'https://giscus.app');
            console.log('[主题切换] 主题更新消息已发送');
          } catch (error) {
            console.error('[主题切换] 发送消息失败:', error);
          }
        }
      });
    });

    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['data-theme']
    });
  }

  // 初始化主题切换按钮
  function initThemeToggle() {
    const themeToggle = document.getElementById('theme-toggle');
    if (!themeToggle) {
      console.log('[主题切换] 未找到主题切换按钮');
      return;
    }

    // 初始化主题
    initTheme();
    
    // 添加点击事件监听器
    themeToggle.addEventListener('click', toggleTheme);
    console.log('[主题切换] 初始化完成');
  }

  // 主函数
  async function init() {
    try {
      // 初始化主题切换
      initThemeToggle();

      // 使用 Intersection Observer 监听评论区域
      const giscusContainer = document.getElementById('giscus-container');
      if (!giscusContainer) {
        console.log('[初始化] 未找到评论容器，跳过初始化');
        return;
      }

      const observer = new IntersectionObserver(async (entries) => {
        const entry = entries[0];
        if (entry.isIntersecting) {
          console.log('[Giscus] 评论区域进入视图');
          observer.disconnect(); // 停止观察

          // 等待 Giscus iframe 加载
          const frame = await waitForGiscus();
          
          // 设置主题观察器
          if (frame) {
            setupThemeObserver(frame);
          }

          // 处理外链
          if (typeof window.handleExternalLinks === 'function') {
            console.log('[Markdown处理] 调用外链处理函数处理Markdown生成的链接');
            window.handleExternalLinks();
          }
        }
      }, {
        rootMargin: '100px' // 提前 100px 开始加载
      });

      observer.observe(giscusContainer);
    } catch (error) {
      console.error('[初始化错误]', error);
    }
  }

  // 确保在 DOM 加载完成后再执行
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
</script>

<style>
  /* 隐藏 Giscus 加载错误消息 */
  .giscus-frame {
    min-height: 200px;
  }
  
  /* 当 Giscus 加载失败时显示友好的提示 */
  .giscus-frame:not([src])::after {
    content: '评论区加载中...';
    display: block;
    text-align: center;
    padding: 2rem;
    color: var(--sl-color-text-accent);
  }

  /* 主题切换按钮样式 */
  #theme-toggle {
    cursor: pointer;
    border: 0;
    opacity: 0.8;
    padding: 0.5rem;
    border-radius: 0.5rem;
    background: none;
    color: var(--sl-color-text);
    transition: opacity 0.2s ease;
    position: relative;
    width: 24px;
    height: 24px;
  }

  #theme-toggle:hover {
    opacity: 1;
  }

  .sun, .moon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: all 0.3s ease;
  }

  .sun {
    display: block;
  }

  .moon {
    display: none;
  }

  @media (prefers-reduced-motion: no-preference) {
    .sun, .moon {
      transition: all 0.3s cubic-bezier(0.5, 0, 0.25, 1.25);
    }
  }
</style> 
